from flask import Flask, request, jsonify
from linebot import LineBotApi, WebhookHandler
import os
import json
import requests
import openai

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Environment
LINE_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
GOOGLE_SCRIPT_URL = os.getenv("GOOGLE_SCRIPT_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not all([LINE_ACCESS_TOKEN, LINE_CHANNEL_SECRET, GOOGLE_SCRIPT_URL, OPENAI_API_KEY]):
    raise ValueError("Missing API keys. Please set all required environment variables.")

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Keys
openai.api_key = OPENAI_API_KEY
line_bot_api = LineBotApi(LINE_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

app = Flask(__name__)

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
conversation_history = {}

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
def ReplyAssessmentMessage(reply_token):
    flex_message = {
        "type": "flex",
        "altText": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ üìã",
        "contents": {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {"type": "text", "text": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ üìã", "weight": "bold", "size": "lg"},
                    {"type": "text", "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", "size": "md", "margin": "md"},
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": [
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#5AACFF",
                        "action": {
                            "type": "uri",
                            "label": "‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤",
                            "uri": "https://forms.gle/ZmUfLVDKkjBXAVbx8"
                        }
                    },
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#FF6B6B",
                        "action": {
                            "type": "uri",
                            "label": "‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢",
                            "uri": "https://forms.gle/jxurYZrY4dGgPUKJA"
                        }
                    }
                ]
            }
        }
    }

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_ACCESS_TOKEN}'
    }
    data = {
        "replyToken": reply_token,
        "messages": [flex_message]
    }
    requests.post('https://api.line.me/v2/bot/message/reply', headers=headers, json=data)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢
def ReplyChatMessage(reply_token):
    flex_message = {
        "type": "flex",
        "altText": "‡∏°‡∏≤‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢ üòä",
        "contents": {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {"type": "text", "text": "üòä ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á?", "weight": "bold", "size": "xl", "align": "center"}
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": [
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#5AACFF",
                        "action": {"type": "message", "label": "‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏≠‡∏¢‡∏π‡πà ‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ", "text": "‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏≠‡∏¢‡∏π‡πà ‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"}
                    },
                    {
                        "type": "button",
                        "style": "primary",
                        "color": "#FF6B6B",
                        "action": {"type": "message", "label": "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏±‡∏Å", "text": "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏±‡∏Å"}
                    }
                ]
            }
        }
    }

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_ACCESS_TOKEN}'
    }
    data = {
        "replyToken": reply_token,
        "messages": [flex_message]
    }
    requests.post('https://api.line.me/v2/bot/message/reply', headers=headers, json=data)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ô‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢
def ReplyFollowUpQuestion(reply_token, question, options):
    buttons = [
        {
            "type": "button",
            "style": "primary",
            "color": "#5AACFF",
            "action": {"type": "message", "label": option, "text": option}
        } for option in options
    ]
    flex_message = {
        "type": "flex",
        "altText": question,
        "contents": {
            "type": "bubble",
            "size": "mega",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {"type": "text", "text": question, "weight": "bold", "size": "xl", "align": "center"}
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": buttons
            }
        }
    }

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_ACCESS_TOKEN}'
    }
    data = {
        "replyToken": reply_token,
        "messages": [flex_message]
    }
    requests.post('https://api.line.me/v2/bot/message/reply', headers=headers, json=data)

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Apps Script
def get_user_info(name):
    try:
        params = {"name": name}
        response = requests.get(GOOGLE_SCRIPT_URL, params=params)
        response.raise_for_status()
        data = response.json()
        return data.get("user_info") if data.get("status") == "success" else None
    except Exception as e:
        app.logger.error(f"Error fetching user info: {e}")
        return None

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
def format_user_info(name, user_info_list):
    if not user_info_list:
        return ""  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ReplyMessage() ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ

    message = f"üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {name}\n"
    for info in user_info_list:
        if info.get("sheet") == "‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤":
            message += (
                "\n[‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤]\n"
                f"‡πÄ‡∏û‡∏®: {info.get('‡πÄ‡∏û‡∏®', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏≠‡∏≤‡∏¢‡∏∏: {info.get('‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {info.get('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤: {info.get('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤: {info.get('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
            )
        elif info.get("sheet") == "‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢":
            message += (
                "\n[‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢]\n"
                f"‡πÄ‡∏û‡∏®: {info.get('‡πÄ‡∏û‡∏®', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏≠‡∏≤‡∏¢‡∏∏: {info.get('‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {info.get('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢: {info.get('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢: {info.get('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
            )

    return message

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô OpenAI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def get_openai_response(user_id, user_message):
    global conversation_history
    history = conversation_history.get(user_id, [])
    history.append({"role": "user", "content": user_message})
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o mini",
            messages=[{"role": "system", "content": "You are a helpful assistant, YOU MUST RESPOND IN THAI"}] + history,
            max_tokens=150,
            temperature=0.7,
            stop=["\n\n"]
        )
        bot_reply = response["choices"][0]["message"]["content"]
        history.append({"role": "assistant", "content": bot_reply})
        conversation_history[user_id] = history[-10:]  # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏Ñ‡πà 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        return bot_reply
    except Exception as e:
        app.logger.error(f"Error from OpenAI API: {e}")
        return "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE Webhook
@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    if request.method == "POST":
        try:
            req = request.json
            app.logger.debug(f"Received full request: {json.dumps(req, indent=2, ensure_ascii=False)}")

            if 'events' in req:
                for event in req['events']:
                    reply_token = event.get('replyToken')
                    user_message = event.get('message', {}).get('text')

                    if not reply_token or not user_message:
                        continue

                    if user_message == "‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô":
                        ReplyAssessmentMessage(reply_token)
                    elif user_message == "‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢":
                        ReplyChatMessage(reply_token)
                    elif user_message.startswith("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á "):  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á"
                        name = user_message.replace("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á ", "")  # ‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á" ‡∏≠‡∏≠‡∏Å
                        user_info_list = get_user_info(name)
                        formatted_info = format_user_info(name, user_info_list)
                        if formatted_info:
                            line_bot_api.reply_message(reply_token, TextSendMessage(text=formatted_info))
                    elif user_message == "‡πÇ‡∏≠‡πÄ‡∏Ñ‡∏≠‡∏¢‡∏π‡πà ‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ" or user_message == "‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏≠‡∏¢‡∏≤‡∏Å‡∏û‡∏±‡∏Å":
                        ReplyFollowUpQuestion(reply_token, "‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏™‡∏±‡∏Å‡∏Ñ‡∏ô‡∏ö‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏Ñ‡∏≥‡πÑ‡∏´‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤?", ["‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß", "‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ‡∏ï‡πà‡∏≠"])


                    elif user_message == "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß" or user_message == "‡∏û‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÑ‡∏õ‡∏ï‡πà‡∏≠":
                        ReplyFollowUpQuestion(reply_token, "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏´‡∏°?", ["‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ", "‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"])
        except Exception as e:
            app.logger.error(f"Error processing webhook: {e}")

    return jsonify({"status": "ok"})


if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))  # Default to 5000 if not specified
    app.run(host="0.0.0.0", port=port)
