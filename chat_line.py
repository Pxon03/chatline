from flask import Flask, request, jsonify
from linebot import LineBotApi, WebhookHandler
import os
import json
import requests
import openai

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Environment
LINE_ACCESS_TOKEN = os.getenv("LINE_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
GOOGLE_SCRIPT_URL = os.getenv("GOOGLE_SCRIPT_URL")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not all([LINE_ACCESS_TOKEN, LINE_CHANNEL_SECRET, GOOGLE_SCRIPT_URL]):
    raise ValueError("Missing API keys. Please set all required environment variables.")
    
openai.api_key = OPENAI_API_KEY
line_bot_api = LineBotApi(LINE_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)
app = Flask(__name__)

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
conversation_history = {}

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Apps Script
def get_user_info(name):
    try:
        params = {"name": name}
        response = requests.get(GOOGLE_SCRIPT_URL, params=params)
        response.raise_for_status()
        data = response.json()
        return data.get("user_info") if data.get("status") == "success" else None
    except Exception as e:
        app.logger.error(f"Error fetching user info: {e}")
        return None

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
def format_user_info(name, user_info_list):
    if not user_info_list:
        return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {name} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‚ùå"
    
    message = f"üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á {name}\n"
    for info in user_info_list:
        if info.get("sheet") == "‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤":
            message += (
                "\n[‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤]\n"
                f"‡πÄ‡∏û‡∏®: {info.get('‡πÄ‡∏û‡∏®', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏≠‡∏≤‡∏¢‡∏∏: {info.get('‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {info.get('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤: {info.get('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤: {info.get('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
            )
        elif info.get("sheet") == "‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢":
            message += (
                "\n[‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢]\n"
                f"‡πÄ‡∏û‡∏®: {info.get('‡πÄ‡∏û‡∏®', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏≠‡∏≤‡∏¢‡∏∏: {info.get('‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {info.get('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢: {info.get('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
                f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢: {info.get('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
            )
    return message

# ‚úÖ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢"
conversation_questions = {
    "‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢": [
        "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á?",
        "‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏™‡∏±‡∏Å‡∏Ñ‡∏ô‡∏ö‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£?",
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î ‡πÜ ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?",
        "‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏™‡∏µ ‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏≠‡∏∞‡πÑ‡∏£?",
        "‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£?",
        "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏Å‡πá‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ß‡∏¥‡∏ò‡∏µ‡∏£‡∏±‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
    ],
    "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ": [
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üòä ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á‡∏Ñ‡∏∞?",
        "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ ‡∏â‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ ‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢ ‡πÑ‡∏î‡πâ‡∏ô‡∏∞",
    ],
    "‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢": [
        "‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏à üíô ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏∂‡∏Å ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏±‡∏á‡∏ß‡∏•‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏•‡∏°‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏ô‡∏∞ ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°?",
        "‡∏•‡∏≠‡∏á‡∏ô‡∏∂‡∏Å‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏™‡∏á‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î... ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏∞‡πÄ‡∏• ‡∏†‡∏π‡πÄ‡∏Ç‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡∏Å‡πá‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à",
        "‡πÄ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏á‡∏ö‡∏™‡∏∏‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î üéß https://youtu.be/zr3quEuGSAE?si=QMVE9u1FlvjzIWME"
    ]
}

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢
def handle_conversation(user_id, reply_token, user_message):
    if user_id not in conversation_history:
        conversation_history[user_id] = []

    conversation_history[user_id].append(user_message)
    next_question_index = len(conversation_history[user_id])

    if next_question_index <= len(conversation_questions["‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢"]):
        question = conversation_questions["‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢"][next_question_index - 1]
        ReplyMessage(reply_token, question)
    elif next_question_index <= len(conversation_questions["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"]):
        question = conversation_questions["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"][next_question_index - 1]
        ReplyMessage(reply_token, question)
    elif next_question_index <= len(conversation_questions["‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢"]):
        question = conversation_questions["‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢"][next_question_index - 1]
        ReplyMessage(reply_token, question)
    else:
        ReplyMessage(reply_token, "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤‡∏ô‡∏∞ üíô")
        conversation_history.pop(user_id, None)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (Flex Message)
def ReplyAssessmentMessage(reply_token):
    flex_message = {
        "type": "flex",
        "altText": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ üìã",
        "contents": {
            "type": "bubble",
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {"type": "text", "text": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ üìã", "weight": "bold", "size": "lg"},
                    {"type": "text", "text": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", "size": "md", "margin": "md"},
                ]
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "spacing": "sm",
                "contents": [
                    {"type": "button", "style": "primary", "color": "#5AACFF", "action": {"type": "uri", "label": "‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤", "uri": "https://forms.gle/ZmUfLVDKkjBXAVbx8"}},
                    {"type": "button", "style": "primary", "color": "#FF6B6B", "action": {"type": "uri", "label": "‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ü‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏¢", "uri": "https://forms.gle/jxurYZrY4dGgPUKJA"}}
                ]
            }
        }
    }
    ReplyMessage(reply_token, flex_message)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Google Apps Script
def FetchUserData(user_id):
    response = requests.get(f"{GOOGLE_SCRIPT_URL}?userId={user_id}")
    if response.status_code == 200:
        return response.json()
    return {"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô OpenAI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def get_openai_response(user_id, user_message):
     global conversation_history
     history = conversation_history.get(user_id, [])
     history.append({"role": "user", "content": user_message})
    
     try:
         response = openai.ChatCompletion.create(
             model="gpt-4o mini",
             messages=[{"role": "system", "content": "You are a helpful assistant, YOU MUST RESPOND IN THAI"}] + history,
             max_tokens=150,
             temperature=0.7,
             stop=["\n\n"]
         )
         bot_reply = response["choices"][0]["message"]["content"]
         history.append({"role": "assistant", "content": bot_reply})
         conversation_history[user_id] = history[-10:]  # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏Ñ‡πà 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
         return bot_reply
     except Exception as e:
         app.logger.error(f"Error from OpenAI API: {e}")
         return "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
def ReplyMessage(reply_token, message):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {LINE_ACCESS_TOKEN}'
    }
    if isinstance(message, str):  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        data = {"replyToken": reply_token, "messages": [{"type": "text", "text": message}]}
    else:  # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Flex Message
        data = {"replyToken": reply_token, "messages": [message]}

    response = requests.post('https://api.line.me/v2/bot/message/reply', headers=headers, json=data)
    print("LINE API Response:", response.status_code, response.text)  # Debug ‡∏î‡∏π Response

@app.route('/webhook', methods=['POST', 'GET'])
def webhook():
    if request.method == "POST":
        try:
            req = request.json
            app.logger.debug(f"Received full request: {json.dumps(req, indent=2, ensure_ascii=False)}")

            if 'events' in req:
                for event in req['events']:
                    reply_token = event.get('replyToken')
                    user_id = event.get('source', {}).get('userId', "")
                    user_message = event.get('message', {}).get('text', "")

                    if not reply_token or not user_message:
                        continue

                    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if user_id in conversation_history:
                        handle_conversation(user_id, reply_token, user_message)  # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏ï‡πà‡∏≠
                    elif user_message == "‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢":
                        handle_conversation(user_id, reply_token, user_message)
                    elif user_message == "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ":
                        handle_conversation(user_id, reply_token, user_message)
                    elif user_message == "‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏•‡∏≤‡∏¢":
                        handle_conversation(user_id, reply_token, user_message)
                    elif user_message == "‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô":
                        ReplyAssessmentMessage(reply_token)
                    else:
                        user_info_list = get_user_info(user_message)
                        response_message = format_user_info(user_message, user_info_list) if user_info_list else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                        ReplyMessage(reply_token, response_message)

            return jsonify({"status": "success"}), 200
        except Exception as e:
            app.logger.error(f"Error processing POST request: {e}")
            return jsonify({"error": str(e)}), 500
    elif request.method == "GET":
        return "GET", 200

# ‚úÖ ‡∏£‡∏±‡∏ô Flask ‡∏ö‡∏ô Render
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))  # Render ‡∏à‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î PORT ‡∏ú‡πà‡∏≤‡∏ô Environment Variables
    app.run(host="0.0.0.0", port=port, debug=True)
